#ifndef PROG_ASSEMBLER_GUARD
#define PROG_ASSEMBLER_GUARD

#include "asm/asm_constants.txt"
#include "asm/asm_tokenizer.txt"
#include "asm/asm_parser.txt"
#include "asm/asm_emitter.txt"
#include "memory/map.txt"
/// ------- todo ----------
/// -old ideas:-
/// parser: upper/lowercase support
/// general: throw exception to return from several frames
/// -ideas:-
/// hash&cache commands (needs std_ordered_map for fast lookup)
/// general: output-to-disk
/// general: rdp API to remotely load with tasks
/// general: read labels and make a symbol table, then fill them in
/// debug: profile the functions to figure out what takes up time

/// ------- main -----------

float assemble(float stream_code, float stream_verify, float stream_out){
    trace_enter("assemble");
    init_total();
    float prev_stream_in = cur_stream_in;
    cur_stream_in = stream_code;
    
    float buff = stack_alloc(300);
    //float buff2 = stack_alloc(10);
    asmp_debug = 0;
    asme_debug = 0;
    float I = 0;
    
    //set_disk_pos(36, 18); /// beginning of DB line
    //set_disk_pos(182, 54); /// borks when it gets here, but not if I skip to it :/
    //set_disk_pos(223, 78); /// eax, ebx:2 segment
    //set_disk_pos(689, 306); 
    //set_disk_pos(2223, 1032); /// db "lots",0
    //set_disk_pos(4184, 2012); // push 2048
    //set_disk_pos(5069, 2445);
    //set_disk_pos(5874, 2769);
    float n_skip = 0;
    
    //float limit = 500;
    float limit = -1;
    //float limit = 100;
    prof_reset();
    float total_time = prof_time();
    
    if(n_skip != 0){
        /// assemble without verification
        printf("skip %d lines\n", n_skip);
        while(Hasch()){                        
            asm_memleak_mark();                                  
            getline_n(buff, 300);                                  
            if(strlen(buff) == 0){break;}
            if(I < (n_skip-1)){printf(".");}
            if(I == (n_skip-1)){printf(".\n");}
            if(I > (n_skip-1)){
                print_disk_pos();
                //printf("line %d: [%s]\n", I, buff);
                printf("[%s]\n", buff);
                assemble_line(buff, 0, 0);
                printf("\n");
            }
            I++;
            asm_memleak_check();
        }   
    }else{
        /// verification is ON
        while(Hasch()){     
                                                //trace("1");       
            asm_memleak_mark();                 //trace("1.1");
            save_disk_pos();                    //trace("1.2"); 
            getline_n(buff, 300);               //trace("1.3");
            print_disk_pos();                   //trace("2");
            //printf("line %d: [%s]\n", I++, buff);
            printf("[%s]\n", buff);
            if(buff[0] == 0){break;}
            //assemble_line(buff, stream_verify, stream_out); //trace("3");
            assemble_line(buff, 0, stream_out); /// no verify
            //printf("\n");
            asm_memleak_check();
            I++;
            if((limit != -1) && (I >= limit)){
                printf("\nProfiling data\nafter %d lines:\n", limit);
                prof_report_line(PROF_FUNC_TOKENIZER, "token");
                prof_report_line(PROF_FUNC_PARSER, "parse");
                prof_report_line(PROF_FUNC_EMITTER, "emitr");
                prof_report_line(PROF_FUNC_VERIFY, "verfy");
                total_time = prof_time() - total_time;
                printf("total: %d s\n", total_time);
                printf("per line: %d s\n", total_time / limit);
                float kb = total_code_emitted;// / 1000;
                float kb_per_min = kb /(total_time/60.0)
                //fint kb;
                //fint kb_per_min;
                printf("code: %d b, %d b/min\n", kb, kb_per_min);
                cur_func = "asm";
                HaltError("end profile");
            }
                                                //trace("4");
                                        
        }
                                                //trace("5");
           
    }
                                                //trace("6");
    printf("Assembler done.\n");
    
    cleanup_total();
    cur_stream_in = prev_stream_in;
    trace_exit("assemble");
}

float total_code_emitted = 0;

float assemble_line(float str, float stream_verify, float stream_out){
    trace_enter("assemble_line");
    //printf("line 1\n");
    //printf("asm_line begin\n");
    asm_init();
    float res = 0;
    prof_mark_t1(PROF_FUNC_TOKENIZER);
    res = asm_tokenize(str);
    prof_mark_t2(PROF_FUNC_TOKENIZER);
    //printf("Tokenized\n");
    //asm_print_toks(lb_tokens);
    prof_mark_t1(PROF_FUNC_PARSER);
    res = asm_parse(lb_tokens);
    prof_mark_t2(PROF_FUNC_PARSER);
    if(res == 1){
        //printf("Parse good\n");
        
        if(asmp_line_type != ASMP_LINETYPE_LABEL){
            prof_mark_t1(PROF_FUNC_EMITTER);
            asm_emit_code();        
            prof_mark_t2(PROF_FUNC_EMITTER);
            if(stream_verify){
                prof_mark_t1(PROF_FUNC_VERIFY);
                float ver_pos = ftell(stream_verify);
                if(asme_verify(stream_verify)){
                    //printf("code verified\n");
                }else{
                    printf("code mismatch\n");
                    print_disk_pos();
                    fseek(stream_verify, ver_pos); // rewind so verify can re-read the line
                    asme_debug = 1;
                    asm_emit_code();
                    asme_verify(stream_verify);
                    HaltError("1");
                }
                prof_mark_t2(PROF_FUNC_VERIFY);
            }
            float size = Lbuff_size(codebuff);
            asm_emit_actual(stream_out);
            total_code_emitted += size;
            //asme_print_codebuff();
        }
        //printf("line 2\n");
        asm_cleanup();
        //printf("line 3\n");
        //printf("asm_line done\n");
        trace_exit("assemble_line"); return 1;
    }else{
        asmp_debug = 1;
        printf("parse error. Tokens: \n");
        asm_print_toks(lb_tokens);
        asm_parse(lb_tokens);
        HaltError("2");
    }
    //printf("line 4\n");
}


float asm_emit_actual(float stream_out){
    if(stream_out == 0){return 0;}
    float cba = Lbuff_array(codebuff);
    float size = Lbuff_size(codebuff);
    //printf("emitting %d bytes\n", size);
    fwrite(stream_out, cba, size);
}

/// ------- general --------

float lb_tokens;

float asm_init(){                   trace_enter("asm_init");
    lb_tokens = Lbuff_new(0);  
    asmp_db_list = Lbuff_new(0);    trace_exit("asm_init");  
}


float asm_cleanup(){                trace_enter("asm_cleanup");
    //printf("asm_cleanup begin: allocs %d\n", sm_used_allocs);
    float I = 0;
    if(lb_tokens){
        //printf("cleanup lb_tokens\n");
        float size = Lbuff_size(lb_tokens);
        float arr = Lbuff_array(lb_tokens);
        
        while(I < size){
            float tok_typestr = arr[I++];
            float lstr_tok = arr[I++];
            //printf("allocs %d; freeing lstr %d; allocs %d\n", sm_used_allocs, lstr_tok);
            free(lstr_tok);
            //printf("allocs %d\n", sm_used_allocs);
        }
        free(lb_tokens);
        lb_tokens = 0;
    }
    //printf("asm_cleanup end: allocs %d\n", sm_used_allocs);
    if(asmp_db_list){
        //printf("cleanup asmp_db_list\n");
        /// PST: no need to free the strings
        /// because it's just pointers into lb_tokens
        
        //size = Lbuff_size(asmp_db_list)/2;
        //arr = Lbuff_array(asmp_db_list);
        //for(I = 0; I < size; I++){
        //    float type = arr[2*I];
        //    float val = arr[2*I+1];
        //    
        //    if(type == ASMP_DBTYPE_STRING){
        //        free(val);
        //    }
        //}
        free(asmp_db_list);
        asmp_db_list = 0;
    }

    if(codebuff){
        //printf("cleanup codebuff\n");
        free(codebuff);
        codebuff = 0;
    }                               trace_exit("asm_cleanup");
}

float init_total(){                 trace_enter("init_total");
    printf("initializing opcodes\n");
    init_cmd_map();               
    init_opcount_map();
                                    trace_exit("init_total");
}                           

float asmc_cmd_map = 0;
float asmc_opcount_map = 0;

float init_cmd_map(){             trace_enter("init_cmd_map");
   // printf("init_cmdt_map\n");
    float map = new_map_si();
    float skip = 0;
    if(skip){
        printf("SKIPPING\n");
    }else{
        float size = cmdTableEnd - cmdTable;
        float count = floor(size / 2);
        float I = 0;
        while(cmdTable[2*I+1] != 0){
            float cmd_val = cmdTable[2*I];
            float cmd_name = cmdTable[2*I+1];
            //printf("%d: cmd [%d:%s] ", I, cmd_val, cmd_name);
            //float cell = map_si_at(map, cmd_name);
            
            //if(*cell != 0){
            //    ErrorTrace("map collision on key [%s]\n", cmd_name);
            //}
            //printf("@ %d\n", cell);
            //*cell = cmd_val;
            map_si_insert(map, cmd_name, cmd_val);
            
            I++;
            printf("\r%d/%d    ", I, count);
        }
        //printf("\n");
        //printf("-- btree_rebalance --\n");
        //btree_rebalance(map);
        //printf("done rebalance\n");     
        map_si_rebalance(map);
    }
    
    //map_si_print(map);
    
    asmc_cmd_map = map;        
    printf("cmd map done\n");
                                    trace_exit("init_cmd_map");
}


float init_opcount_map(){             trace_enter("init_opcount_map");
    //printf("init_opcount_map\n");
    float map = new_map_ii();
    float skip = 0;
    if(skip){
        printf("SKIPPING\n");
    }else{
        float size = cmdTable2End - cmdTable2;
        float count = floor(size / 3);
        float I;
        //while(cmdTable[3*I+1] != 0){
        for(I = 0; I < count; I++){
            float cmd_val     = cmdTable2[3*I];
            float cmd_opcount = cmdTable2[3*I+1];
            //float cmd_name    = cmdTable[3*I+2];
            //map_si_insert(map, cmd_name, cmd_val);
            //map_ii_insert(map, cmd_val, cmd_opcount);
            btree_insert(map, cmd_val, cmd_opcount);
            
            //I++;
            printf("\r%d/%d    ", I, count);
        }
        //printf("\n");
        map_ii_rebalance(map);
    }
    
    asmc_opcount_map = map;        
    printf("opcount map done\n");
    map_ii_print(map);
                                    trace_exit("init_opcount_map");
}

float cleanup_total(){              trace_enter("cleanup_total");
    if(asmc_cmd_map){
        btree_delete(asmc_cmd_map);
        asmc_cmd_map = 0;
    }                               
    
    if(asmc_opcount_map){
        btree_delete(asmc_opcount_map);
        asmc_opcount_map = 0;
    }
                                    trace_exit("cleanup_total");
}

#endif
