/// stack alloc 2 simplified

//Stack allocation and 
#ifndef STACKALLOC_GUARD
#define STACKALLOC_GUARD


// memcpy2 - copies memory. can copy to overlapping areas.
//
// stack_alloc - allocates space on the stack of the current function
// stack_return - allocates space on the owner's stack, copies the object there, and returns pointer to that object.
//
//                NOTE: in this case the function cannot be used as an argument for a call, as it would mess up
//                the arguments. e.g. printf("%d,%s\n", 1, returns_string_on_stack("hello")) will bork.
//
#include "util/string.txt"

void *memcpy2(void *dest, void *src, float n) {
    float I;
    if(dest < src){
        for(I = 0; I < n; I++){
            dest[I] = src[I];
        }
    }else{
        for(I = n-1; I > -1; I--){
            dest[I] = src[I];
        }
    }
}


stack_alloc:
    mov eax, esp;
    add eax, 2;     //eax = &size = X
    rstack ebx, esp:2;//mov ebx, esp:#2 //ebx = size
    rstack ecx, esp:1;//mov ecx, esp:#1 //ecx = IPprev
    mov edx, eax;
    add edx, ss;
    sub edx, ebx;   
    inc edx;        //edx = X-size+1;
    sub esp, ebx;   //ESP = ESP-size;
    push ecx;       //push IPprev
    push edx;
        push ebx; //size
        push 8008135;
        push edx; //X-size+1
        call memset;
        add esp, 3;
    pop eax; //eax = edx = X-size+1
ret;

//float stack_return(float ptr, float size, float num_args)
//allows the caller to return a multibyte structure by value.
//ptr - pointer to the structure you wish to return.
//size - size of the structure you wish to return.
//num_args - number of arguments of your function

float curFrame(){return backFrame();}

float backFrame(float curEBP, float num_times){
    float nargs = ecx;
    float cEBP = 0; 
    float n = 0;
    if(nargs == 0){cEBP = ebp; n = 2;}
    if(nargs == 1){cEBP = curEBP; n = 1;}
    if(nargs == 2){cEBP = curEBP; n = num_times;}
    float I;
    for(I = 0; I < n; I++){
        cEBP = *(ss+cEBP);
    }
    return cEBP;
}


float stack_jump(float new_ip, float new_ebp, float retval){
    preserve eax, ebx, ecx;
    eax = retval;
    ecx = new_ip;
    ebx = new_ebp;
    mov ebp, ebx;
    jmp ecx;
}

void stack_return(float ptr, float size, float num_args){
    float prevIP;
    float x1 = backFrame(ebp,1);
    prevIP = *(ss+x1+1);
    float x2 = backFrame(ebp, 2);
    
    stack_jump(prevIP, x2, ptr);
}

#endif

